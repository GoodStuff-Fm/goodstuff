%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 400 68
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 400 68
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.85490197 0.33725491 0.27843139 sc
q
292.36349 67.763046 m
296.16766 67.212006 296.62628 67.222725 298.75134 66.802956 c
299.36911 66.680977 299.96564 66.451317 300.72968 66.224274 c
300.21198 62.436783 299.69406 58.645718 299.16446 54.771267 c
297.93207 55.009983 296.74945 55.267517 295.55637 55.459774 c
294.81567 55.579369 294.05951 55.64798 293.30954 55.656319 c
290.71515 55.685146 289.97876 54.981392 289.8999 52.38723 c
289.85867 51.038334 289.88657 49.687527 289.8887 48.337677 c
289.88895 48.182587 289.92633 48.027729 289.96588 47.720406 c
296.25726 47.720406 l
296.25726 36.56448 l
289.89655 36.56448 l
289.89655 2.0641811 l
274.16364 2.0641811 l
274.16364 36.573769 l
270.39328 36.573769 l
270.85284 39.631306 271.27286 42.570911 271.74289 45.502419 c
272.24725 47.890266 272.13669 47.62225 274.16315 47.832138 c
274.16315 49.429043 274.13004 51.050961 274.17148 52.670734 c
274.22223 54.652149 274.16315 56.657631 274.45474 58.607361 c
275.2338 63.817368 278.15884 66.649055 283.38483 67.519806 c
284.31393 67.67466 286.08548 68.001289 287.10037 68.000092 c
289.16516 68.000092 288.75754 68.001289 292.36349 67.763046 c
h
26.65196 15.178273 m
26.65196 24.060703 l
22.263157 24.060703 l
22.263157 37.906803 l
42.093056 37.906803 l
42.093056 2.79352 l
34.978821 1.0720191 27.784777 0.084526502 20.429209 0.70989877 c
17.414795 0.96624184 14.445646 1.4365218 11.626587 2.5793447 c
6.934032 4.4816675 4.0890055 8.0728531 2.4301608 12.735152 c
0.7877546 17.350756 0.26101249 22.157904 0.12021441 27.003645 c
-0.062751636 33.312401 -0.15494938 39.627586 0.74606311 45.904419 c
1.2728052 49.573746 2.1766765 53.130386 3.9753664 56.406624 c
6.5159264 61.033901 10.492341 63.901798 15.527719 65.054626 c
23.699965 66.925507 31.821465 66.601974 39.756905 63.654984 c
40.352257 63.434139 40.662918 63.196854 40.55714 62.477142 c
39.935341 58.243191 39.355949 54.002811 38.739868 49.605907 c
38.289124 49.692387 37.882217 49.751949 37.484837 49.849625 c
33.580132 50.810673 29.634449 51.52467 25.600382 51.145397 c
21.308302 50.741585 19.054104 48.892151 18.244574 44.650101 c
16.751066 36.82473 16.709614 28.960047 18.378225 21.129196 c
18.411102 20.974104 18.442072 20.818058 18.489481 20.667253 c
19.86673 16.291079 21.896509 14.900965 26.65196 15.178273 c
h
268.93344 2.0501251 m
255.51236 2.0501251 l
255.2491 2.7453008 254.98705 3.4366646 254.76668 4.0186777 c
252.65041 3.298249 250.64565 2.4444075 248.55655 1.9441096 c
245.27222 1.1574509 241.93927 1.1896129 238.68663 2.225944 c
234.30164 3.6234424 232.51724 7.0461941 231.88948 11.264658 c
231.6684 12.749351 231.60168 14.268588 231.59811 15.772341 c
231.57382 26.014627 231.58453 36.256916 231.58691 46.499203 c
231.58691 46.848221 231.61955 47.197235 231.64029 47.615105 c
247.30556 47.615105 l
247.30556 46.239048 l
247.30724 36.989254 247.30176 27.739225 247.32082 18.489433 c
247.32295 17.503847 247.41754 16.511591 247.55786 15.535295 c
247.72296 14.38461 248.52129 13.745658 249.61717 13.772579 c
250.66447 13.798308 251.7301 14.027493 252.7326 14.342918 c
253.02039 14.433449 253.27388 15.131483 253.27673 15.552924 c
253.31319 20.872282 253.30055 26.192114 253.30055 31.511709 c
253.30055 46.279549 l
253.30055 47.62249 l
268.93344 47.62249 l
268.93344 2.0501251 l
h
201.97186 46.497963 m
201.26955 42.619225 200.59271 38.879856 199.89635 35.03376 c
198.52696 35.431614 197.23285 35.865921 195.9104 36.179916 c
193.19116 36.825779 190.44238 37.139534 187.66287 36.568718 c
187.28073 36.490101 186.89813 36.353828 186.55054 36.176342 c
184.98628 35.377533 184.79378 33.765144 186.2437 32.786228 c
187.17973 32.154186 188.28539 31.758713 189.34244 31.324884 c
191.86252 30.290459 194.50362 29.495699 196.90575 28.240906 c
200.9939 26.105349 202.94698 22.485813 203.28336 17.924288 c
203.51421 14.792424 203.26764 11.732508 201.94876 8.8538895 c
200.05476 4.7199998 196.56317 2.5868256 192.29919 1.6984396 c
185.07109 0.19182847 177.96376 0.94084573 170.87025 3.1705062 c
171.56496 7.0104108 172.24608 10.775509 172.94435 14.636855 c
174.42189 14.248291 175.80057 13.716545 177.22237 13.548589 c
179.88419 13.233639 182.56984 13.107612 185.24858 12.958714 c
185.69598 12.934175 186.18556 13.132627 186.60962 13.328219 c
188.27991 14.098916 188.53053 15.879976 187.00748 16.89987 c
185.9752 17.591709 184.73947 17.99147 183.57353 18.469851 c
181.1983 19.444479 178.72255 20.215414 176.44548 21.378248 c
173.13255 23.069733 171.06346 25.860203 170.31564 29.55097 c
169.51564 33.500225 169.70956 37.377296 171.43893 41.062107 c
173.24905 44.91869 176.55054 46.964668 180.5341 47.87521 c
187.75078 49.524765 194.85645 48.823631 201.97186 46.497963 c
h
206.02724 36.573673 m
202.26285 36.573673 l
202.6445 39.126148 203.01091 41.580704 203.37851 44.034782 c
203.49573 44.818821 203.69275 45.600239 203.71562 46.386658 c
203.74467 47.386063 204.10323 47.867538 205.15123 47.696011 c
205.3766 47.659084 205.61794 47.722454 205.99007 47.749615 c
205.99007 56.270397 l
211.26964 56.833828 216.42056 57.383205 221.72014 57.94854 c
221.72014 47.711018 l
228.88132 47.711018 l
228.88132 36.556522 l
221.83379 36.556522 l
221.79518 36.242287 221.75136 36.052414 221.75136 35.862774 c
221.75421 29.788208 221.75922 23.713877 221.77112 17.639547 c
221.77184 17.203812 221.79781 16.764265 221.8588 16.333055 c
222.10799 14.567957 222.94373 13.764145 224.71478 13.851816 c
226.28047 13.929244 227.83521 14.218225 229.54289 14.432162 c
230.10156 10.830256 230.67548 7.130435 231.25797 3.373913 c
227.17291 1.9759381 223.10669 1.1745087 218.91205 1.3141155 c
216.90633 1.3808219 214.86296 1.5771292 212.92134 2.0576534 c
209.07381 3.0094104 207.0152 5.7412744 206.39935 9.5499706 c
206.12895 11.2243 206.05249 12.944371 206.04295 14.64467 c
206.00459 21.433472 206.02724 28.222752 206.02724 35.011791 c
206.02724 36.573673 l
h
320.47546 67.763046 m
324.27963 67.212006 324.73825 67.222725 326.86331 66.802956 c
327.48108 66.680977 328.07761 66.451317 328.84164 66.224274 c
328.32394 62.436783 327.80603 58.645718 327.27643 54.771267 c
326.04404 55.009983 324.86142 55.267517 323.66833 55.459774 c
322.92764 55.579369 322.17148 55.64798 321.42151 55.656319 c
318.82712 55.685146 318.09073 54.981392 318.01187 52.38723 c
317.97064 51.038334 317.99854 49.687527 318.00067 48.337677 c
318.00092 48.182587 318.0383 48.027729 318.07785 47.720406 c
324.36923 47.720406 l
324.36923 36.56448 l
318.00851 36.56448 l
318.00851 2.0641811 l
302.2756 2.0641811 l
302.2756 36.573769 l
298.50525 36.573769 l
298.96481 39.631306 299.38483 42.570911 299.85486 45.502419 c
300.35922 47.890266 300.24866 47.62225 302.27512 47.832138 c
302.27512 49.429043 302.242 51.050961 302.28345 52.670734 c
302.3342 54.652149 302.27512 56.657631 302.56671 58.607361 c
303.34576 63.817368 306.27081 66.649055 311.4968 67.519806 c
312.42593 67.67466 314.19745 68.001289 315.21234 68.000092 c
317.27713 68.000092 316.86951 68.001289 320.47546 67.763046 c
h
154.01651 2.0905778 m
153.80925 2.6892674 153.59174 3.317975 153.41591 3.8268492 c
151.44617 3.2160096 149.53313 2.4524598 147.54718 2.0360215 c
138.70168 0.18086956 131.93837 4.4557953 129.65915 13.205766 c
128.26999 18.539654 128.28072 23.959309 128.60782 29.398499 c
128.82033 32.931553 129.32253 36.414341 130.64616 39.732506 c
132.75076 45.00803 136.79602 47.678188 142.28024 48.463417 c
145.45546 48.918213 148.59352 48.79171 151.79758 47.932865 c
151.79758 65.216965 l
157.03951 65.775391 162.21353 66.326431 167.47261 66.886528 c
167.47261 2.0905778 l
154.01651 2.0905778 l
h
82.924721 11.682311 m
80.661705 5.5817747 76.129959 2.3007743 69.843124 1.3235259 c
65.977966 0.72293031 62.096844 0.79344851 58.243359 1.5493746 c
51.850029 2.8034544 47.689697 6.586659 46.150925 12.87564 c
44.228111 20.735796 44.137344 28.682907 46.271233 36.533772 c
48.174984 43.539131 53.436211 47.760929 60.650269 48.47707 c
64.385109 48.848003 68.08136 48.828232 71.771172 48.050148 c
78.189995 46.696247 82.149254 42.734367 83.582253 36.459915 c
84.424416 32.773674 84.764145 28.929125 84.870636 25.143896 c
84.814415 20.57165 84.537819 16.030851 82.924721 11.682311 c
h
86.27433 23.955736 m
86.262894 28.617081 86.537819 32.560143 87.663963 36.407673 c
89.504822 42.696892 93.475044 46.721191 99.982727 48.085575 c
104.67886 49.069969 109.37856 49.017559 114.01727 47.873066 c
120.0237 46.391472 123.68159 42.406479 125.05813 36.484146 c
126.85277 28.764074 126.9059 20.989208 124.88993 13.282001 c
123.0972 6.4283977 117.90411 2.0781894 110.84396 1.2600834 c
106.95259 0.80886245 103.09053 0.81934482 99.250862 1.649601 c
92.957115 3.0106492 89.142464 6.9353662 87.516975 13.079976 c
86.515427 16.865801 86.264801 20.739298 86.27433 23.955736 c
h
151.82306 25.229828 m
151.82306 28.639713 151.83545 32.049362 151.80566 35.458775 c
151.80234 35.836617 151.67297 36.38504 151.40733 36.562286 c
149.05904 38.128933 145.50406 36.810532 145.15028 34.064373 c
144.74695 30.933937 144.64546 27.749422 144.63689 24.588017 c
144.62997 21.983133 144.79745 19.355141 145.17125 16.778368 c
145.50121 14.503443 146.94469 13.579798 149.24701 13.728219 c
149.75826 13.761096 150.26476 13.874973 150.77101 13.965504 c
151.54599 14.103681 151.85857 14.507255 151.84474 15.35776 c
151.79161 18.647575 151.82306 21.939058 151.82306 25.229828 c
h
68.999527 24.75128 m
68.96331 24.75271 68.926865 24.754377 68.890648 24.755808 c
68.890648 26.422752 68.890648 28.089697 68.890411 29.756641 c
68.890411 29.875759 68.89827 29.996546 68.88279 30.113758 c
68.73127 31.24991 68.675285 32.411079 68.396309 33.515545 c
68.0411 34.920666 67.263016 36.042049 65.682312 36.327457 c
63.199642 36.775581 61.21751 35.455032 61.093628 32.651936 c
60.866589 27.512209 61.003098 22.355568 61.038357 17.206076 c
61.042645 16.598331 61.303036 15.966528 61.54985 15.390709 c
62.269325 13.712329 63.836926 12.948302 65.629662 13.340679 c
67.322571 13.711376 68.425369 14.952114 68.63121 17.152233 c
68.866829 19.67445 68.886124 22.217392 68.999527 24.75128 c
h
102.12948 24.942276 m
102.17284 24.940607 102.21597 24.93894 102.25908 24.937273 c
102.25908 22.992542 102.17189 21.042572 102.29053 19.104992 c
102.367 17.857821 102.60143 16.57682 103.02383 15.404217 c
103.64157 13.689625 105.28588 12.949184 107.07695 13.33894 c
108.77272 13.707969 109.98701 14.948231 110.0673 17.145016 c
110.2436 21.974079 110.19047 26.812435 110.19214 31.64698 c
110.19238 32.308563 110.04491 32.994926 109.83621 33.627205 c
109.3969 34.95776 108.67385 36.05365 107.14199 36.328098 c
104.65742 36.773842 102.84038 35.459965 102.52114 32.656868 c
102.23002 30.103682 102.24789 27.515236 102.12948 24.942276 c
h
W*
0 0 400 68 rc
-1.1911799 69.191284 m
330.03284 69.191284 l
330.03284 -0.67012048 l
-1.1911799 -0.67012048 l
h
f
Q
q
363.73007 47.749851 m
376.00232 47.749851 l
377.97644 42.280972 379.95056 36.812031 381.92471 31.343151 c
381.94711 31.347275 381.96954 31.3514 381.99194 31.355465 c
383.82288 36.820278 385.65381 42.285034 387.48474 47.749851 c
400 47.749851 l
400 2.0996289 l
388.27292 2.0996289 l
388.27292 25.830296 l
388.2562 25.833632 388.2395 25.836908 388.22278 25.840244 c
387.38974 22.773745 386.55667 19.707308 385.72635 16.65106 c
385.66379 16.642508 385.63394 16.634865 385.60413 16.634865 c
383.12369 16.634077 380.64322 16.636381 378.16284 16.628618 c
377.97565 16.628012 377.92468 16.70929 377.88391 16.860989 c
377.27911 19.110214 376.67102 21.358593 376.06326 23.60709 c
375.87814 24.291952 375.69168 24.976448 375.50577 25.661127 c
375.48566 25.65761 375.46555 25.654213 375.4455 25.650755 c
375.4455 2.0965962 l
363.73007 2.0965962 l
363.73007 47.749851 l
h
360.603 47.749851 m
360.603 37.686199 l
348.77188 37.686199 l
348.77188 29.021198 l
360.27905 29.021198 l
360.27905 18.95051 l
348.77292 18.95051 l
348.77292 2.0981731 l
337.03058 2.0981731 l
337.03058 47.749851 l
360.603 47.749851 l
h
322.57297 2.0762765 m
322.57297 11.841808 l
332.88019 11.841808 l
332.88019 2.0762765 l
322.57297 2.0762765 l
h
W*
0 0 400 68 rc
321.38177 48.941036 m
401.19119 48.941036 l
401.19119 0.88509136 l
321.38177 0.88509136 l
h
f
ep
end
%%Trailer
%%EOF
